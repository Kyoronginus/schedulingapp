# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
# input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!

type User
  @model
  @auth(rules: [
    { allow: owner },
    { allow: private, provider: userPools },
    { allow: public, provider: apiKey, operations: [read] }
  ])
{
  id: ID!
  email: String! @index(name: "byEmail", queryField: "listUsersByEmail")
  name: String!
  groups: [GroupUser] @hasMany(indexName: "byUser", fields: ["id"])
  schedules: [Schedule] @hasMany(indexName: "byUser", fields: ["id"])
}


type Group
  @model
  @auth(rules: [
    { allow: owner },
    { allow: private, provider: userPools },
    { allow: public, provider: apiKey, operations: [read] }
  ])
  {
  id: ID!
  name: String!
  description: String
  ownerId: ID! @index(name: "byOwner", sortKeyFields: ["name"])
  members: [GroupUser] @hasMany(indexName: "byGroup", fields: ["id"])
  schedules: [Schedule] @hasMany(indexName: "byGroup", fields: ["id"])
}

type GroupUser
  @model
  @auth(rules: [
    { allow: owner },
    { allow: private, provider: userPools },
    { allow: public, provider: apiKey, operations: [read] }
  ])
  {
  id: ID!
  userId: ID! @index(name: "byUser")
  groupId: ID! @index(name: "byGroup")
  group: Group @belongsTo(fields: ["groupId"])
  user: User @belongsTo(fields: ["userId"])
  isAdmin: Boolean!
}

type Schedule
  @model
  @auth(rules: [
    { allow: owner },
    { allow: private, provider: userPools },
    { allow: public, provider: apiKey, operations: [read] }
  ])
  {
  id: ID!
  title: String!
  description: String
  location: String
  startTime: AWSDateTime!
  endTime: AWSDateTime!
  userId: ID! @index(name: "byUser")
  groupId: ID! @index(name: "byGroup")
  user: User @belongsTo(fields: ["userId"])
  group: Group @belongsTo(fields: ["groupId"])
  notifications: [Notification] @hasMany(indexName: "bySchedule", fields: ["id"])
}

enum NotificationType {
  CREATED
  UPCOMING
}

type Notification
  @model
  @auth(rules: [
    { allow: owner },
    { allow: private, provider: userPools },
    { allow: public, provider: apiKey, operations: [read] }
  ])
  {
  id: ID!
  scheduleId: ID! @index(name: "bySchedule")
  schedule: Schedule @belongsTo(fields: ["scheduleId"])
  type: NotificationType!
  timestamp: AWSDateTime!
  isRead: Boolean!
  message: String
}